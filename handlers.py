import os
import json
import time

from asyncio import sleep

from datetime import datetime

import aiohttp

from aiogram import Router, types, Bot, F
from aiogram.types import BufferedInputFile, URLInputFile
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from pyrogram import Client

from sqlalchemy.orm import Session, joinedload, sessionmaker
from sqlalchemy import insert, select, update

from config import BEARER_TOKEN, FEEDBACK_REASON_PREFIX

from keyboards import (create_start_keyboard,
                       create_start_inline_keyboard,
                       create_swift_start_kb,
                       add_cancel_btn_to_kb,
                       create_kb_to_main,
                       create_swift_sepa_kb,
                       create_support_kb,
                       create_feedback_form_reasons_kb,
                       reason_dict,
                       create_feedback_confirm_kb,
                       create_condition_kb,
                       add_switch_language_btn)

from states import SwiftSepaStates, FeedbackFormStates

from utils.handlers import try_add_file_ids_to_db, try_add_file_ids, swift_sepa_data
from utils.multilanguage import start_text_dict

from db.base import Base


main_router = Router()

start_text = 'üí±<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MoneySwap!</b>\n\n–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ª—É—á—à—É—é —Å–¥–µ–ª–∫—É –ø–æ–¥ –≤–∞—à—É –∑–∞–¥–∞—á—É üí∏\n\nüëâüèª <b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫</b>, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äú–±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ‚Äù, ‚Äú–Ω–∞–ª–∏—á–Ω—ã–µ‚Äù –∏–ª–∏ ‚ÄúSwift/Sepa‚Äù –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å <a href="https://t.me/MoneySwap_support">Support</a> –∏–ª–∏ <a href="https://t.me/moneyswap_admin">Admin</a>. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –≤–∞–º –ø–æ–º–æ—á—å!'

about_text = '''
<b>MoneySwap ‚Äî –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –æ–±–º–µ–Ω–∞ , –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π</b>\n
MoneySwap ‚Äî —ç—Ç–æ —É–¥–æ–±–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–æ—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤. –ú—ã –ø–æ–º–æ–≥–∞–µ–º —á–∞—Å—Ç–Ω—ã–º –ª–∏—Ü–∞–º –∏ –±–∏–∑–Ω–µ—Å—É –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±–º–µ–Ω–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ‚Äî –≤—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.

MoneySwap ‚Äî —ç—Ç–æ –∏ —Å–∞–π—Ç, –∏ Telegram-–±–æ—Ç: –º–æ–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–±–º–µ–Ω–Ω–∏–∫ –ø—Ä—è–º–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞.\n
<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å MoneySwap</b>\n
<i>1. –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –æ–±–º–µ–Ω–Ω–∏–∫–∞–º</i>\r
–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –æ–±–º–µ–Ω–Ω–∏–∫–∞–º–∏ —Å —Ö–æ—Ä–æ—à–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏. –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–¥–µ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚Äî –∫–∞–∂–¥—ã–π –æ–±–º–µ–Ω–Ω–∏–∫ –ø—Ä–æ—à–µ–ª –Ω–∞—à—É –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å.

<i>2. –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –≤—ã–≥–æ–¥–Ω—ã–µ –∫—É—Ä—Å—ã</i>\r
MoneySwap –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –∫—É—Ä—Å—ã. –ú—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å—Ä–∞–∑—É —É–≤–∏–¥–µ—Ç—å, –≥–¥–µ —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤–∞—à–µ–π —Å–¥–µ–ª–∫–∏.

<i>3. –†–µ—à–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</i>\r
–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–æ—Å—Å–∏–∏ —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ: –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º –æ–±–º–µ–Ω–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤. –ù–∞–ª–∏—á–Ω—ã–µ, –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ, SWIFT/SEPA ‚Äî –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±, –∞ –º—ã –ø–æ–º–æ–≥–∞–µ–º –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±–º–µ–Ω–Ω–∏–∫.

<i>4. –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</i>\r
–ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏. –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –æ —Å–∫—Ä—ã—Ç—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö ‚Äî –≤—ã –≤–∏–¥–∏—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º–∏.

<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±–º–µ–Ω —Å MoneySwap?</b>

–ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—à Telegram-–±–æ—Ç –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–º–µ–Ω–∞:\r

<i>–ù–∞–ª–∏—á–Ω—ã–µ</i>\r
–£–∫–∞–∂–∏—Ç–µ c—Ç—Ä–∞–Ω—É, –≥–æ—Ä–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –æ—Ç–¥–∞–µ—Ç–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ. –ù–∏–∂–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –∏ –∏—Ö –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞.

<i>–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã</i>\r
–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç–¥–∞–µ—Ç–µ –∏ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å, –∞ –±–æ—Ç –ø–æ–¥–±–µ—Ä–µ—Ç –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –Ω–∞–¥–µ–∂–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.

<b>–í–∞–∂–Ω–æ: MoneySwap –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –æ–±–º–µ–Ω–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –≤–∞–º –Ω–∞–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —É–¥–æ–±–Ω–æ.</b>

<b>SWIFT/SEPA –ø–µ—Ä–µ–≤–æ–¥—ã, —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>

–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç —Ç–∏–ø –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ–≥–æ –∏ —Å–≤—è–∂–µ–º –≤–∞—Å —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–¥–µ–ª–∫–∏.

MoneySwap ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤—ã. –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –æ–±–º–µ–Ω—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É —Å MoneySwap!
'''

condition_text = '''
<b>–£—Å–ª–æ–≤–∏—è –æ–±–º–µ–Ω–∞ SWIFT/SEPA —Å MoneySwap</b>

–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ SWIFT/SEPA, MoneySwap —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å—Ç—ã–º –∏ —É–¥–æ–±–Ω—ã–º. –í—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –∞ –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–¥–±–µ—Ä—É—Ç –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>

\t1. –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –≤ Telegram-–±–æ—Ç–µ –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ MoneySwap.\r
\t2. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥.\r
\t3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –∏ —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –¥–µ—Ç–∞–ª–∏.\r

<b>–£—Å–ª–æ–≤–∏—è</b>

	‚Ä¢	–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: –æ—Ç $3 000 –≤ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ.
	‚Ä¢	–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: –¥–æ $500 000 –≤ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ.

<b>–ß—Ç–æ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å?</b>

MoneySwap –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á:

	‚Ä¢	–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Ä—É–±–µ–∂–æ–º (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ì–æ–Ω–∫–æ–Ω–≥, –ö–∏—Ç–∞–π, –ï–≤—Ä–æ–ø–∞, –û–ê–≠, –¢–∞–∏–ª–∞–Ω–¥, –¢—É—Ä—Ü–∏—è).
	‚Ä¢	–û–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–æ–≤ –∑–∞ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–Ø–ø–æ–Ω–∏—è, –ö–æ—Ä–µ—è, –ö–∏—Ç–∞–π –∏ –¥—Ä—É–≥–∏–µ).
	‚Ä¢	–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–ï–≤—Ä–æ–ø–∞, –ê–∑–∏—è, –û–ê–≠).
	‚Ä¢	–û–ø–ª–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π (–ê–Ω–≥–ª–∏—è, –ï–≤—Ä–æ–ø–∞, –°–®–ê –∏ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã).
	‚Ä¢	–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ ‚Äî –ø–æ—á—Ç–∏ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.

<b>–í–∞–∂–Ω–æ!</b>
MoneySwap –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç –æ–±–º–µ–Ω—ã –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–ø—Ä—è–º—É—é, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ.
–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –º—ã –Ω–∞–π–¥–µ–º –¥–ª—è –≤–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!
'''

# @main_router.message(Command('start'))
# async def start(message: types.Message | types.CallbackQuery,
#                 session: Session,
#                 state: FSMContext,
#                 bot: Bot,
#                 text_msg: str = None):
#     is_callback = isinstance(message, types.CallbackQuery)

#     data = await state.get_data()
#     main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

#     # if main_menu_msg:
#     #     chat_id, message_id = main_menu_msg

#     _start_text = start_text
#     utm_source = None

#     if isinstance(message, types.Message):
#         query_param = message.text.split()

#         if len(query_param) > 1:
#             utm_source = query_param[-1]

#     with session as session:
#         Guest = Base.classes.general_models_guest

#         tg_id = message.from_user.id
#         guest = session.query(Guest)\
#                         .where(Guest.tg_id == tg_id)\
#                         .first()
    
#         if isinstance(message, types.CallbackQuery):
#             message = message.message

#         chat_link = None

#         if not guest:
#             value_dict = {
#                 'username': message.from_user.username,
#                 'tg_id': tg_id,
#                 'first_name': message.from_user.first_name,
#                 'last_name': message.from_user.last_name,
#                 'language_code': message.from_user.language_code,
#                 'is_premium': bool(message.from_user.is_premium),
#                 'is_active': True,
#             }

#             if utm_source:
#                 value_dict.update(
#                     {
#                         'utm_source': utm_source,
#                     }
#                 )
#             session.execute(insert(Guest).values(**value_dict))
#             session.commit()
#         else:
#             chat_link  = guest.chat_link

#     start_kb = create_start_inline_keyboard(tg_id)

#     if chat_link:
#         chat_link_text = f'C—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç–∞ –ø–æ –í–∞—à–∏–º –æ–±—Ä–∞—â–µ–Ω–∏—è–º -> {chat_link}'
#         _start_text += f'\n\n{chat_link_text}'

#     if not is_callback:
#         main_menu_msg: types.Message = await message.answer(text=_start_text,
#                                                             reply_markup=start_kb.as_markup(),
#                                                             disable_web_page_preview=True,
#                                                             disable_notification=True)
#         try:
#             chat_id, message_id = main_menu_msg
#             await bot.delete_message(chat_id=chat_id,
#                                      message_id=message_id)
#         except Exception:
#             pass
#     else:
#         try:
#             chat_id, message_id = main_menu_msg

#             main_menu_msg: types.Message = await bot.edit_message_text(text=_start_text,
#                                                                         chat_id=chat_id,
#                                                                         message_id=message_id,
#                                                                         reply_markup=start_kb.as_markup(),
#                                                                         disable_web_page_preview=True)
#         except Exception as ex:
#             print(ex)
#             main_menu_msg: types.Message = await bot.send_message(chat_id=message.chat.id,
#                                                                   text=_start_text,
#                                                                   reply_markup=start_kb.as_markup(),
#                                                                   disable_web_page_preview=True,
#                                                                   disable_notification=True)


#     # if not is_callback:
#     #     try:
#     #         await bot.delete_message(chat_id=chat_id,
#     #                                  message_id=message_id)
#     #     except Exception:
#     #         pass

#     msg_data = (main_menu_msg.chat.id, main_menu_msg.message_id)

#     await state.update_data(main_menu_msg=msg_data)
    
#     # if main_menu_msg:
#     #     try:
#     #         await main_menu_msg.delete()
#     #     except Exception:
#     #         pass
#     # await state.update_data(start_msg=start_msg.message_id)
#     # await state.update_data(username=message.from_user.username)
#     # try:
#     #     await bot.delete_message(message.chat.id,
#     #                             prev_start_msg)
#     # except Exception:
#     #     pass
#     try:
#         await message.delete()
#     except Exception:
#         pass


@main_router.message(Command('start'))
async def start(message: types.Message | types.CallbackQuery,
                session: Session,
                state: FSMContext,
                bot: Bot,
                text_msg: str = None):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        # print('TEST LANGUAGE', type(select_language), select_language)
        select_language = 'ru'
        await state.update_data(select_language=select_language)

    # language_code = message.from_user.language_code
    # print(language_code)

    is_callback = isinstance(message, types.CallbackQuery)

    # _start_text = start_text
    _start_text = start_text_dict.get('ru') if select_language == 'ru'\
          else start_text_dict.get('en')
    
    utm_source = None

    if isinstance(message, types.Message):
        query_param = message.text.split()

        if len(query_param) > 1:
            utm_source = query_param[-1]
            
    with session as session:
        Guest = Base.classes.general_models_guest

        tg_id = message.from_user.id
        guest = session.query(Guest)\
                        .where(Guest.tg_id == tg_id)\
                        .first()
    
        if isinstance(message, types.CallbackQuery):
            message = message.message

        chat_link = None

        if not guest:
            value_dict = {
                'username': message.from_user.username,
                'tg_id': tg_id,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name,
                'language_code': message.from_user.language_code,
                'select_language': 'ru',
                'is_premium': bool(message.from_user.is_premium),
                'time_create': datetime.now(),
                'is_active': True,
            }

            if utm_source:
                value_dict.update(
                    {
                        'utm_source': utm_source,
                    }
                )
            session.execute(insert(Guest).values(**value_dict))
            session.commit()
        else:
            chat_link  = guest.chat_link

    start_kb = create_start_inline_keyboard(tg_id,
                                            select_language)
    start_kb = add_switch_language_btn(start_kb,
                                       select_language)

    if chat_link:
        if select_language == 'ru':
            chat_link_text = f'C—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç–∞ –ø–æ –í–∞—à–∏–º –æ–±—Ä–∞—â–µ–Ω–∏—è–º -> {chat_link}'
        else:
            chat_link_text = f'Link to chat for your requests -> {chat_link}'
        
        _start_text += f'\n\n{chat_link_text}'

    if not is_callback:
        _msg = await message.answer(text=_start_text,
                             reply_markup=start_kb.as_markup(),
                             disable_web_page_preview=True,
                             disable_notification=True)

        try:
            await bot.unpin_all_chat_messages(chat_id=message.chat.id)
        except Exception as ex:
            print('unpin error', ex)
        await bot.pin_chat_message(message.chat.id,
                                    message_id=_msg.message_id)
        try:
            await message.delete()
        except Exception:
            pass
    else:
        _msg = await bot.send_message(chat_id=message.chat.id,
                               text=_start_text,
                               reply_markup=start_kb.as_markup(),
                               disable_web_page_preview=True,
                               disable_notification=True)
        
        try:
            await bot.unpin_all_chat_messages(chat_id=message.chat.id)
        except Exception as ex:
            print('unpin error', ex)
        await bot.pin_chat_message(message.chat.id,
                                    message_id=_msg.message_id)
        try:
            await message.delete()
        except Exception:
            pass


@main_router.callback_query(F.data.startswith('lang'))
async def request_type_state(callback: types.CallbackQuery,
                             session: Session,
                             state: FSMContext,
                             bot: Bot):
    callback_data = callback.data.split('_')[-1]

    if callback_data == 'ru':
        select_language = 'ru'
    else:
        select_language = 'en'
    
    await state.update_data(select_language=select_language)

    await start(callback,
                session,
                state,
                bot,
                text_msg='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    
    await callback.answer()


# @main_router.message(F.text == 'Swift/Sepa')
# async def start_swift_sepa(message: types.Message,
#                            state: FSMContext,
#                            bot: Bot):
#     data = await state.get_data()
#     await state.set_state(SwiftSepaStates.request_type)
#     await state.update_data(order=dict())

#     swift_start_kb = create_swift_start_kb()
#     kb = add_cancel_btn_to_kb(swift_start_kb)

#     main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

#     # print('has_main_menu_msg?', bool(main_menu_msg))

#     if main_menu_msg:
#         try:
#             await bot.delete_message(*main_menu_msg)
#             # await main_menu_msg.delete()
#         except Exception:
#             pass

#     state_msg = await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏</b>',
#                          reply_markup=kb.as_markup())
    
#     state_data_message = (state_msg.chat.id, state_msg.message_id)
    
#     await state.update_data(state_msg=state_data_message)
#     # await state.update_data(username=message.from_user.username)
#     await message.delete()


@main_router.callback_query(F.data.in_(('cancel', 'to_main')))
async def back_to_main(callback: types.CallbackQuery,
                       state: FSMContext,
                       session: Session,
                       bot: Bot):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'
    # start_msg = state_data.get('start_msg')
    # main_menu_msg: tuple[str,str] = data.get('main_menu_msg')
    # chat_link_msg: tuple[str,str] = data.get('chat_link_msg')

    await state.clear()

    if select_language:
        await state.update_data(select_language=select_language)
    # if main_menu_msg:
    #     await state.update_data(main_menu_msg=main_menu_msg)

    # if chat_link_msg:
    #     await state.update_data(chat_link_msg=chat_link_msg)

    await start(callback,
                session,
                state,
                bot,
                text_msg='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    try:
        await callback.answer()
        # await callback.message.delete()
    except Exception:
        pass


# @main_router.callback_query(F.data == 'invoice_swift/sepa')
# async def invoice_swift_sepa(callback: types.CallbackQuery,
#                             session: Session,
#                             state: FSMContext,
#                             bot: Bot,
#                             api_client: Client):
#     data = await state.get_data()

#     main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

#     chat_id, message_id = main_menu_msg
#     # chat_id = callback.message.chat.id
#     # message_id = callback.message.message_id

#     swift_sepa_kb = create_swift_sepa_kb()
#     swift_sepa_kb = add_cancel_btn_to_kb(swift_sepa_kb)

#     # await state.update_data(action='swift/sepa')

#     await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
#                                 chat_id=chat_id,
#                                 message_id=message_id,
#                                 reply_markup=swift_sepa_kb.as_markup())
    
#     # await bot.edit_message_reply_markup(chat_id=chat_id,
#     #                                     message_id=message_id,
#     #                                     reply_markup=swift_sepa_kb.as_markup())
    
#     await callback.answer()

@main_router.callback_query(F.data == 'invoice_swift/sepa')
async def invoice_swift_sepa(callback: types.CallbackQuery,
                            session: Session,
                            state: FSMContext,
                            bot: Bot,
                            api_client: Client):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'
    # language_code = callback.from_user.language_code

    _text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' if select_language == 'ru' else 'Choose an action'
    # data = await state.get_data()

    # main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

    await state.set_state(SwiftSepaStates.request_type)
    await state.update_data(order=dict())

    # chat_id, message_id = main_menu_msg
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    # swift_sepa_kb = create_swift_sepa_kb()
    swift_sepa_kb = create_swift_start_kb(select_language)
    swift_sepa_kb = add_cancel_btn_to_kb(select_language,
                                         swift_sepa_kb)

    # await state.update_data(action='swift/sepa')

    await bot.edit_message_text(text=_text,
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=swift_sepa_kb.as_markup())
    
    # await bot.edit_message_reply_markup(chat_id=chat_id,
    #                                     message_id=message_id,
    #                                     reply_markup=swift_sepa_kb.as_markup())
    
    await callback.answer()

    

# @main_router.callback_query(F.data == 'start_swift_sepa')
# async def start_swift_sepa(callback: types.CallbackQuery,
#                             session: Session,
#                             state: FSMContext,
#                             bot: Bot,
#                             api_client: Client):
#     # await callback.answer(text='–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
#     #                       show_alert=True)
#     data = await state.get_data()

#     # if not data.get('action'):
#     #     await callback.answer(text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
#     #     await state.clear()

#     #     await start(callback,
#     #                 session,
#     #                 state,
#     #                 bot,
#     #                 text_msg='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
#     #     return
    
#     await state.set_state(SwiftSepaStates.request_type)
#     await state.update_data(order=dict())

#     swift_start_kb = create_swift_start_kb()
#     kb = add_cancel_btn_to_kb(swift_start_kb)

#     main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

#     chat_id, message_id = main_menu_msg
#     # chat_id = callback.message.chat.id
#     # message_id = callback.message.message_id


#     # print('has_main_menu_msg?', bool(main_menu_msg))

#     # if main_menu_msg:
#     #     try:
#     #         await bot.delete_message(*main_menu_msg)
#     #         # await main_menu_msg.delete()
#     #     except Exception:
#     #         pass

#     # state_msg = await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏</b>',
#     #                      reply_markup=kb.as_markup())
#     await bot.edit_message_text(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏</b>',
#                                 chat_id=chat_id,
#                                 message_id=message_id,
#                                 reply_markup=kb.as_markup())
    
#     try:
#         await callback.answer()
#     except Exception:
#         pass
    
#     # state_data_message = (state_msg.chat.id, state_msg.message_id)
    
#     # await state.update_data(state_msg=state_data_message)
#     # # await state.update_data(username=message.from_user.username)
#     # await message.delete()

@main_router.callback_query(F.data == 'start_swift_sepa')
async def start_swift_sepa(callback: types.CallbackQuery,
                            session: Session,
                            state: FSMContext,
                            bot: Bot,
                            api_client: Client):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'
    # language_code = callback.from_user.language_code
    # data = await state.get_data()

    # if not data.get('action'):
    #     await callback.answer(text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    #     await state.clear()

    #     await start(callback,
    #                 session,
    #                 state,
    #                 bot,
    #                 text_msg='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    #     return
    
    await state.set_state(SwiftSepaStates.request_type)
    await state.update_data(order=dict())

    swift_start_kb = create_swift_start_kb(select_language)
    kb = add_cancel_btn_to_kb(select_language,
                              swift_start_kb)

    # main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

    # chat_id, message_id = main_menu_msg
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    await bot.edit_message_text(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏</b>',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=kb.as_markup())
    
    try:
        await callback.answer()
    except Exception:
        pass


@main_router.callback_query(F.data == 'conditions')
async def get_conditions(callback: types.CallbackQuery,
                        session: Session,
                        state: FSMContext,
                        bot: Bot,
                        api_client: Client):
    # await callback.answer(text='–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
    #                       show_alert=True)
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    condition_kb = create_condition_kb()

    await bot.edit_message_text(text=condition_text,
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=condition_kb.as_markup())
    try:
        await callback.answer()
    except Exception:
        pass


@main_router.callback_query(F.data == 'about')
async def get_about(callback: types.CallbackQuery,
                    session: Session,
                    state: FSMContext,
                    bot: Bot,
                    api_client: Client):
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    kb = add_cancel_btn_to_kb()

    await bot.edit_message_text(text=about_text,
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=kb.as_markup())
    
    try:
        await callback.answer()
    except Exception:
        pass
    
    # await callback.answer(text='–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
    #                       show_alert=True)


@main_router.callback_query(F.data == 'back_to_swift/sepa')
async def start_support(callback: types.CallbackQuery,
                        session: Session,
                        state: FSMContext,
                        bot: Bot,
                        api_client: Client):
    await invoice_swift_sepa(callback,
                             session,
                             state,
                             bot,
                             api_client)
    try:
        await callback.answer()
        # await callback.message.delete()
    except Exception:
        pass
    


@main_router.callback_query(F.data == 'support')
async def start_support(callback: types.CallbackQuery,
                        session: Session,
                        state: FSMContext,
                        bot: Bot,
                        api_client: Client):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'
    # language_code = callback.from_user.language_code
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    await state.set_state(FeedbackFormStates.reason)

    await state.update_data(feedback_form=dict())

    reason_kb = create_feedback_form_reasons_kb(select_language)

    reason_kb = add_cancel_btn_to_kb(select_language,
                                     reason_kb)
    
    if select_language == 'ru':
        _text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è</b>\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ <a href="https://t.me/MoneySwap_support">Support</a> –∏–ª–∏ <a href="https://t.me/moneyswap_admin">Admin</a>.\n–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –í–∞–º –ø–æ–º–æ—á—å!'
    else:
        _text = '<b>Select the reason for your inquiry</b>\n\nIf you have any questions, you can contact <a href="https://t.me/MoneySwap_support">Support</a> or <a href="https://t.me/moneyswap_admin">Admin</a> directly. We are always ready to help!'

    await bot.edit_message_text(text=_text,
                                chat_id=chat_id,
                                message_id=message_id,
                                disable_web_page_preview=True,
                                reply_markup=reason_kb.as_markup())

    # await bot.edit_message_reply_markup(reply_markup=reason_kb.as_markup(),
    #                                     chat_id=chat_id,
    #                                     message_id=message_id)
    
    await callback.answer()

    # data = await state.get_data()

    # main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

    # chat_id, message_id = main_menu_msg
    # chat_id = callback.message.chat.id
    # message_id = callback.message.message_id

    # support_kb = create_support_kb()
    # support_kb = add_cancel_btn_to_kb(support_kb)

    # await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
    #                             chat_id=chat_id,
    #                             message_id=message_id,
    #                             reply_markup=support_kb.as_markup())
    
    # # await bot.edit_message_reply_markup(chat_id=chat_id,
    # #                                     message_id=message_id,
    # #                                     reply_markup=support_kb.as_markup())
    
    # await callback.answer()
    

# @main_router.callback_query(F.data == 'feedback_form')
# async def start_support(callback: types.CallbackQuery,
#                         session: Session,
#                         state: FSMContext,
#                         bot: Bot,
#                         api_client: Client):
#     # data = await state.get_data()

#     # main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

#     # chat_id, message_id = main_menu_msg
#     chat_id = callback.message.chat.id
#     message_id = callback.message.message_id

#     await state.set_state(FeedbackFormStates.reason)

#     await state.update_data(feedback_form=dict())

#     reason_kb = create_feedback_form_reasons_kb()

#     reason_kb = add_cancel_btn_to_kb(reason_kb)

#     await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è',
#                                 chat_id=chat_id,
#                                 message_id=message_id,
#                                 reply_markup=reason_kb.as_markup())

#     # await bot.edit_message_reply_markup(reply_markup=reason_kb.as_markup(),
#     #                                     chat_id=chat_id,
#     #                                     message_id=message_id)
    
#     await callback.answer()


@main_router.callback_query(F.data == 'feedback_form_send')
async def feedback_form_send(callback: types.CallbackQuery,
                            session: Session,
                            state: FSMContext,
                            bot: Bot,
                            api_client: Client):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'

    # main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

    # chat_id, message_id = main_menu_msg

    feedback_form = data.get('feedback_form')

    feedback_values = {
        'reasons': reason_dict.get(feedback_form['reason']),
        'username': feedback_form['username'],
        'email': feedback_form['contact'],
        'description': feedback_form['description'],
        'time_create': datetime.now(),
    }

    FeedbackForm = Base.classes.general_models_feedbackform

    with session as session:

        _feedback_form = FeedbackForm(**feedback_values)
        session.add(_feedback_form)

    #     new_order = Order(**order)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ order ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    #     session.add(new_order)


    # print(new_order.__dict__)

    # user_id = new_order.guest_id
    # order_id = new_order.id
    # marker = 'swift/sepa'

        # session.execute(insert(FeedbackForm).values(feedback_values))
        try:
    #     session.refresh(new_order)
            session.commit()
            session.refresh(_feedback_form)

            user_id = callback.from_user.id
            marker = 'feedback_form'
            order_id = _feedback_form.id

            _text = '–û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!' if select_language == 'ru'\
                    else 'Request has been send successfully!'
        except Exception as ex:
            print(ex)
            session.rollback()
            _text = '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ' if select_language == 'ru'\
                    else 'Something wrong, try repeat later'

        # else:
        #     _url = f'https://api.moneyswap.online/send_to_tg_group?user_id={user_id}&order_id={order_id}&marker={marker}'
        #     timeout = aiohttp.ClientTimeout(total=5)
        #     async with aiohttp.ClientSession() as session:
        #         async with session.get(_url,
        #                             timeout=timeout) as response:
        #             pass

        # finally:
        await callback.answer(text=_text,
                            show_alert=True)
        
        await start(callback,
                    session,
                    state,
                    bot,
                    text_msg='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

        try:
            _url = f'https://api.moneyswap.online/send_to_tg_group?user_id={user_id}&order_id={order_id}&marker={marker}'
            timeout = aiohttp.ClientTimeout(total=5)
            async with aiohttp.ClientSession() as session:
                async with session.get(_url,
                                    timeout=timeout) as response:
                    pass
        except Exception as ex:
            print(ex)
            pass


    
@main_router.callback_query(F.data.startswith(FEEDBACK_REASON_PREFIX))
async def request_type_state(callback: types.CallbackQuery,
                             session: Session,
                             state: FSMContext,
                             bot: Bot):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'
    
    reason = callback.data.split('__')[-1]

    # data = await state.get_data()

    # main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

    # chat_id, message_id = main_menu_msg
    # language_code = callback.from_user.language_code
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    feedback_form = data.get('feedback_form')

    feedback_form['reason'] = reason

    await state.update_data(feedback_form=feedback_form)
    await state.update_data(state_msg=(chat_id, message_id))

    await state.set_state(FeedbackFormStates.description)

    kb = add_cancel_btn_to_kb(select_language)

    _text = '<b>–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ</b>\n–ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ "–ù–µ—Ç"' if select_language == 'ru'\
                else '<b>Describe the issue if necessary</b>\nIf not, type ‚ÄúNo‚Äù'

    await bot.edit_message_text(text=_text,
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=kb.as_markup())
    

    # await bot.edit_message_reply_markup(chat_id=chat_id,
    #                                     message_id=message_id,
    #                                     reply_markup=kb.as_markup())
    
    await callback.answer()


@main_router.message(FeedbackFormStates.description)
async def request_type_state(message: types.Message,
                             session: Session,
                             state: FSMContext,
                             bot: Bot):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'
    # language_code = message.from_user.language_code

    # reason = callback.data.split('__')[-1]
    description = message.text

    # data = await state.get_data()

    state_msg: tuple[str,str] = data.get('state_msg')

    chat_id, message_id = state_msg

    feedback_form = data.get('feedback_form')

    feedback_form['description'] = description

    await state.update_data(feedback_form=feedback_form)

    await state.set_state(FeedbackFormStates.contact)
    
    kb = add_cancel_btn_to_kb(select_language)

    if select_language == 'ru':
        _text = '<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã —Å–º–æ–∂–µ–º —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è</b>\n(E-mail, —Å—Å—ã–ª–∫–∞ –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ)'
    else:
        _text = '<b>Provide contact details where we can contact you</b>\n(E-mail, Telegram link or something else)'

    await bot.edit_message_text(text=_text,
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=kb.as_markup())
    

    # await bot.edit_message_reply_markup(chat_id=chat_id,
    #                                     message_id=message_id,
    #                                     reply_markup=kb.as_markup())
    
    await message.delete()
    

@main_router.message(FeedbackFormStates.contact)
async def country_state(message: types.Message,
                        session: Session,
                        state: FSMContext,
                        bot: Bot):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'
    # language_code = message.from_user.language_code
    contact = message.text

    # data = await state.get_data()

    state_msg: tuple[str,str] = data.get('state_msg')

    chat_id, message_id = state_msg

    feedback_form = data.get('feedback_form')

    feedback_form['contact'] = contact

    await state.update_data(feedback_form=feedback_form)

    await state.set_state(FeedbackFormStates.username)

    kb = add_cancel_btn_to_kb(select_language)

    _text = '–£–∫–∞–∂–∏—Ç–µ –∏–º—è, —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏ –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è' if select_language == 'ru'\
                else 'Please provide your name so we know how to call you'

    await bot.edit_message_text(text=_text,
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=kb.as_markup())
    

    # await bot.edit_message_reply_markup(chat_id=chat_id,
    #                                     message_id=message_id,
    #                                     reply_markup=kb.as_markup())

    await message.delete()
    


@main_router.message(FeedbackFormStates.username)
async def country_state(message: types.Message,
                        session: Session,
                        state: FSMContext,
                        bot: Bot):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'
    # language_code = message.from_user.language_code
    username = message.text

    # data = await state.get_data()

    state_msg: tuple[str,str] = data.get('state_msg')

    chat_id, message_id = state_msg

    feedback_form = data.get('feedback_form')

    feedback_form['username'] = username

    await state.update_data(feedback_form=feedback_form)

    feedback_confirm_kb = create_feedback_confirm_kb(select_language)

    feedback_confirm_kb = add_cancel_btn_to_kb(select_language,
                                               feedback_confirm_kb)
    
    _text = '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' if select_language == 'ru'\
            else 'Request is done\nChoose an action'

    await bot.edit_message_text(text=_text,
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=feedback_confirm_kb.as_markup())

    # await bot.edit_message_reply_markup(chat_id=chat_id,
    #                                     message_id=message_id,
    #                                     reply_markup=feedback_confirm_kb.as_markup())

    await message.delete()

    # feedback_values = {
    #     'reasons': reason_dict.get(feedback_form['reason']),
    #     'username': username,
    #     'email': feedback_form['contact'],
    #     'description': feedback_form['description'],
    #     'time_create': datetime.now(),
    # }

    # FeedbackForm = Base.classes.general_models_feedbackform

    # session.execute(insert(FeedbackForm).values(feedback_values))
    # try:
    #     session.commit()

    #     tx = ''
    # except Exception as ex:
    #     print(ex)


# @main_router.message(FeedbackFormStates.username)
# async def country_state(message: types.Message,
#                         session: Session,
#                         state: FSMContext,
#                         bot: Bot):
#     username = message.text

#     data = await state.get_data()

#     main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

#     chat_id, message_id = main_menu_msg

#     feedback_form = data.get('feedback_form')

#     feedback_form['username'] = username

#     feedback_values = {
#         'reasons': reason_dict.get(feedback_form['reason']),
#         'username': username,
#         'email': feedback_form['contact'],
#         'description': feedback_form['description'],
#         'time_create': datetime.now(),
#     }

#     FeedbackForm = Base.classes.general_models_feedbackform

#     session.execute(insert(FeedbackForm).values(feedback_values))
#     try:
#         session.commit()

#         tx = ''
#     except Exception as ex:
#         print(ex)


    # await state.update_data(feedback_form=feedback_form)

    # await state.set_state(FeedbackFormStates.username)

    # await bot.edit_message_text(text='–£–∫–∞–∂–∏—Ç–µ –∏–º—è, —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏ –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è',
    #                             chat_id=chat_id,
    #                             message_id=message_id)






@main_router.callback_query(F.data == 'send_app')
async def send_order(callback: types.CallbackQuery,
                   session: Session,
                   state: FSMContext,
                   bot: Bot,
                   api_client: Client):
    
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'

    order: dict = data.get('order')
    time_create = datetime.now()
    order.update({'guest_id': callback.from_user.id,
                  'time_create': time_create,
                  'moderation': False,
                  'status': '–ú–æ–¥–µ—Ä–∞—Ü–∏—è'})
    # if order:
    print('order', order)

    # state_process = data.get('state_process')
    # state_msg: tuple[str, str] = data.get('state_msg')
    # state_msg: types.Message = data.get('state_msg')
    # main_menu_msg: tuple[str,str] = data.get('main_menu_msg')
    # chat_id, message_id = main_menu_msg

    await state.update_data(state_msg=None)

    # username = callback.message.from_user.username
    # username_from_callback = callback.from_user.username

    # kb = create_start_keyboard(callback.from_user.id)

    Order = Base.classes.general_models_customorder

    # session.execute(insert(Order).values(order))
    # session.commit()

    with session as session:

        new_order = Order(**order)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ order ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        session.add(new_order)
        session.commit()

        session.refresh(new_order)

    print(new_order.__dict__)

    user_id = new_order.guest_id
    order_id = new_order.id
    marker = 'swift/sepa'

    _text = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' if select_language == 'ru'\
                 else 'your request has been sent successfully!'

    await callback.answer(text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
                          show_alert=True)
    
    await start(callback,
                session,
                state,
                bot,
                text_msg='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    _url = f'https://api.moneyswap.online/send_to_tg_group?user_id={user_id}&order_id={order_id}&marker={marker}'
    timeout = aiohttp.ClientTimeout(total=5)
    async with aiohttp.ClientSession() as session:
        async with session.get(_url,
                               timeout=timeout) as response:
            pass




# @main_router.callback_query(F.data == 'start_swift_sepa')
# async def start_swift_sepa(callback: types.CallbackQuery,
#                            state: FSMContext,
#                            bot: Bot):
#     data = await state.get_data()
#     await state.set_state(SwiftSepaStates.request_type)
#     await state.update_data(order=dict())

#     swift_start_kb = create_swift_start_kb()
#     kb = add_cancel_btn_to_kb(swift_start_kb)

#     main_menu_msg: tuple[str,str] = data.get('main_menu_msg')

#     # print('has_main_menu_msg?', bool(main_menu_msg))

#     # if main_menu_msg:
#     #     try:
#     #         await bot.delete_message(*main_menu_msg)
#     #         # await main_menu_msg.delete()
#     #     except Exception:
#     #         pass

#     # state_msg = await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏</b>',
#     #                      reply_markup=kb.as_markup())
#     await bot.edit_message_text(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏</b>',
#                                 reply_markup=kb.as_markup())
    
#     # state_data_message = (state_msg.chat.id, state_msg.message_id)
    
#     # await state.update_data(state_msg=state_data_message)
#     # # await state.update_data(username=message.from_user.username)
#     # await message.delete()



@main_router.callback_query(F.data.in_(('pay_payment', 'access_payment')))
async def request_type_state(callback: types.CallbackQuery,
                             session: Session,
                             state: FSMContext,
                             bot: Bot):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'
    # language_code = callback.from_user.language_code
    # data = await state.get_data()

    # if not data.get('order'):
    #     await callback.answer(text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    #     await state.clear()

    #     await start(callback,
    #                 session,
    #                 state,
    #                 bot,
    #                 text_msg='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    #     return

    # state_msg: tuple[str, str] = data.get('state_msg')
    # chat_id, message_id = state_msg
    # state_msg: types.Message = data.get('state_msg')
    # main_menu_msg: tuple[str,str] = data.get('main_menu_msg')
    # chat_id, message_id = main_menu_msg
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    request_type = '–û–ø–ª–∞—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂' if callback.data == 'pay_payment' else '–ü—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂'

    if select_language == 'ru':
        state_process = f'–¢–∏–ø –∑–∞—è–≤–∫–∏: {request_type}'
        _text = f'{state_process}\n<b>–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ –ø–æ–Ω—è—Ç—å –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...</b>'
    else:
        request_dict = {
            '–û–ø–ª–∞—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂': 'Make a Payment',
            '–ü—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂': 'Receive a Payment',
        }
        state_process = f'Request Type: {request_dict.get(request_type)}'
        _text = f'{state_process}\n<b>Describe your request so that managers can quickly understand and promptly start processing it‚Ä¶</b>'
    #
    order = data.get('order')
    order['request_type'] = request_type
    await state.update_data(order=order)
    await state.update_data(state_msg=(chat_id, message_id))
    #
    # username_from_state = data.get('username')
    # print(username_from_state)
    # #
    # print(callback.message.from_user.username)
    # print(callback.from_user.username)
    # await state.update_data(username=callback.message.from_user.username)
    #
    await state.update_data(state_process=state_process)
    # print(state_msg)
    await state.update_data(request_type=callback.data)

    # await state.update_data(proccess_msg=(chat_id, message_id))

    # await state.set_state(SwiftSepaStates.country)
    await state.set_state(SwiftSepaStates.task_text)


    kb = add_cancel_btn_to_kb(select_language)

    #
    # await bot.edit_message_text(f'{state_process}\n<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É...</b>',
    #                             chat_id=chat_id,
    #                             message_id=message_id,
    #                             reply_markup=kb.as_markup())
    #

    await bot.edit_message_text(text=_text,
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=kb.as_markup())

    # await state_msg.edit_text(f'{state_process}\n<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É...</b>',
    #                           reply_markup=kb.as_markup())
    try:
        await callback.answer()
    except Exception:
        pass
    # await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É...')

    # await callback.message.delete()


@main_router.message(SwiftSepaStates.country)
async def country_state(message: types.Message,
                        session: Session,
                        state: FSMContext,
                        bot: Bot):
    language_code = message.from_user.language_code
    data = await state.get_data()

    # if not data.get('order') or not data.get('proccess_msg'):
    #     await message.answer(text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    #     await state.clear()

    #     await start(message,
    #                 session,
    #                 state,
    #                 bot,
    #                 text_msg='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    #     return
    # state_msg: tuple[str, str] = data.get('state_msg')
    # chat_id, message_id = state_msg
    state_msg: tuple[str,str] = data.get('state_msg')
    chat_id, message_id = state_msg

    # state_msg: types.Message = data.get('state_msg')
    await state.update_data(country=message.text)

    #
    order = data.get('order')
    order['country'] = message.text
    await state.update_data(order=order)
    #

    state_process = data.get('state_process')
    state_process += f'\n–°—Ç—Ä–∞–Ω–∞: {message.text}'
    await state.update_data(state_process=state_process)

    await state.set_state(SwiftSepaStates.amount)

    kb = add_cancel_btn_to_kb(language_code)

    #
    await bot.edit_message_text(f'{state_process}\n<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É...</b>',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=kb.as_markup())
    #

    # await state_msg.edit_text(f'{state_process}\n<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É...</b>',
    #                           reply_markup=kb.as_markup())
    # await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É...')

    await message.delete()


@main_router.message(SwiftSepaStates.amount)
async def amount_state(message: types.Message,
                       session: Session,
                       state: FSMContext,
                       bot: Bot):
    language_code = message.from_user.language_code
    data = await state.get_data()
    # state_msg: types.Message = data.get('state_msg')
    # state_msg: tuple[str, str] = data.get('state_msg')
    # chat_id, message_id = state_msg
    state_msg: tuple[str,str] = data.get('state_msg')
    chat_id, message_id = state_msg

    await state.update_data(amount=message.text)

    #
    order = data.get('order')
    order['amount'] = message.text
    await state.update_data(order=order)
    #

    state_process = data.get('state_process')
    state_process += f'\n–°—É–º–º–∞: {message.text}'
    await state.update_data(state_process=state_process)

    await state.set_state(SwiftSepaStates.task_text)

    kb = add_cancel_btn_to_kb(language_code)

    #
    await bot.edit_message_text(f'{state_process}\n<b>–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ –ø–æ–Ω—è—Ç—å –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...</b>',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=kb.as_markup())
    #

    # await state_msg.edit_text(f'{state_process}\n<b>–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ –ø–æ–Ω—è—Ç—å –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...</b>',
    #                           reply_markup=kb.as_markup())
    # await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏...')

    await message.delete()


@main_router.message(SwiftSepaStates.task_text)
async def task_text_state(message: types.Message,
                          session: Session,
                          state: FSMContext,
                          bot: Bot,
                          api_client: Client):
    data = await state.get_data()

    select_language = data.get('select_language')

    if not select_language:
        select_language = 'ru'
    # language_code = message.from_user.language_code

    # data = await state.get_data()
    # state_msg: types.Message = data.get('state_msg')
    # state_msg: tuple[str, str] = data.get('state_msg')
    # chat_id, message_id = state_msg
    state_msg: tuple[str,str] = data.get('state_msg')
    chat_id, message_id = state_msg

    await state.update_data(task_text=message.text)

    #
    order = data.get('order')
    order['comment'] = message.text
    await state.update_data(order=order)
    #

    state_process = data.get('state_process')

    if select_language == 'ru':
        state_process += f'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}'
        state_done_text = '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ.'
    else:
        state_process += f'\nComment: {message.text}'
        state_done_text = 'Request is done.'
    await state.update_data(state_process=state_process)

    # preview_response_text = await swift_sepa_data(state)

    kb = create_kb_to_main(select_language)

    # async with api_client as app:
    #     channel = await app.create_channel(title='Test111')
    #     chat_link = await app.create_chat_invite_link(channel.id)

    # print(channel)
    # print(channel.__dict__)
    # print(chat_link.invite_link)


    # chat_link = await bot.create_chat_invite_link(chat_id=channel.id,
    #                                   name='test_link')
    
    # await message.answer(text=chat_link.invite_link)

    #
    await bot.edit_message_text(f'{state_process}\n<b>{state_done_text}</b>',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=kb.as_markup())
    #

    # await state_msg.edit_text(f'{state_process}\n<b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ.</b>',
    #                           reply_markup=kb.as_markup())
    # await message.answer(f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n{preview_response_text}',
    #                      reply_markup=kb.as_markup())
    
    await message.delete()


@main_router.message(Command('send'))
async def send(message: types.Message,
               session: Session,
               bot: Bot):
    MassSendMessage = Base.classes.general_models_masssendmessage

    mass_message = session.query(MassSendMessage).options(joinedload(MassSendMessage.general_models_masssendimage_collection),
                                                      joinedload(MassSendMessage.general_models_masssendvideo_collection)).first()

    print(mass_message.general_models_masssendimage_collection)
    for q in mass_message.general_models_masssendimage_collection:
        print(q.__dict__)
    print(mass_message.general_models_masssendvideo_collection)
    for w in mass_message.general_models_masssendvideo_collection:
        print(w.__dict__)

    await try_add_file_ids_to_db(message,
                                 session,
                                 bot,
                                 mass_message)
    
    # session.refresh(mass_message)
    session.expire_all()

    print('22')
    for q in mass_message.general_models_masssendimage_collection:
        print(q.__dict__)
    print(mass_message.general_models_masssendvideo_collection)
    for w in mass_message.general_models_masssendvideo_collection:
        print(w.__dict__)

    # print(MassSendMessage)
    # print(MassSendMessage.__dict__)

    # os_path = os.path.dirname(os.path.abspath(__file__))

    # print(os_path)

    # valutes = session.query(Valutes).all()
    # messages = session.query(MassSendMessage).all()
    # MassSendImage = Base.classes.general_models_masssendimage
    # images = session.query(MassSendImage).all()

    # mass_message = session.query(MassSendMessage).options(joinedload(MassSendMessage.general_models_masssendimage_collection),
    #                                                   joinedload(MassSendMessage.general_models_masssendvideo_collection)).first()
   
    # for m in messages:
    #     # images = select(MassSendMessage).options(joinedload(MassSendMessage.images))
    #     # print(v.__dict__)
    #     # for i in m.general_models_masssendimage_collection:
    #     #     print(i.__dict__)
    #     images = [(image.id, image.file_id, types.InputMediaPhoto(media=types.FSInputFile(path=f'/home/skxnny/web/backup_bestexchange/django_fastapi/media/{image.image}'))) for image in m.general_models_masssendimage_collection]
    #     update_image_list = []
    #     for image in images:
    #         if image[1] is None:
    #             # upload image to telegram server
    #             loaded_image = await message.answer_photo(image[-1].media)
    #             # delete image message from chat
    #             await bot.delete_message(message.chat.id, message.message_id)
    #             image_file_id = loaded_image.photo[0].file_id
    #             print(image[0], image_file_id)
    #             image_dict = {
    #                 'id': image[0],
    #                 'file_id': image_file_id,
    #             }
    #             update_image_list.append(image_dict)
    #         else:
    #             print('–∏–∑ –ë–î', image[1])
    #     if update_image_list:
    #         session.bulk_update_mappings(
    #             MassSendImage,
    #             update_image_list,
    #         )
    #         session.commit()
    #         session.flush(MassSendMessage.general_models_masssendimage_collection)
    mass_message_text: str = mass_message.content
    print(mass_message_text)
    mass_message_text: str = mass_message_text.replace('<p>','')\
                                                .replace('</p>', '\n')\
                                                .replace('<br>', '')\
                                                .replace('<p class="">', '')\
                                                # .replace('<span', '<span class="tg-spoiler"')

    print(mass_message_text)

    images = [types.InputMediaPhoto(media=image.file_id) for image in mass_message.general_models_masssendimage_collection]
    videos = [types.InputMediaVideo(media=video.file_id) for video in mass_message.general_models_masssendvideo_collection]
    mb = MediaGroupBuilder(images+videos, caption=mass_message_text)
    
    files = [types.InputMediaDocument(media=file.file_id) for file in mass_message.general_models_masssendfile_collection]
    mb_files = MediaGroupBuilder(files)
    # mb.build()
        # for image in m.general_models_masssendimage_collection:
        #     if image.file_id is None:

        #     image_id = await message.answer_photo(image.media)
        #     print(image_id)
        #     print('ID',image_id.photo[0].file_id)
        # images = [types.InputMediaPhoto(media=f'http://localhost:8000/django/media/{image.image}') for image in m.general_models_masssendimage_collection]
        # print(images)
        # videos = [types.InputMediaVideo(media=types.FSInputFile(path=f'/home/skxnny/web/backup_bestexchange/django_fastapi/media/{video.video}')) for video in m.general_models_masssendvideo_collection]
        # for v in videos:
            # await message.answer_video(v.media)
            # video_id = await message.answer_video('BAACAgIAAxkDAAOTZl79M00aHNBaYsc4gNk6znwWiQ4AAhFPAALje_hKCvWrvLSuzxY1BA')
            # print(video_id)
            # print('ID',video_id.video.file_id)
        # videos = [types.InputMediaVideo(media=video.video) for video in m.general_models_masssendvideo_collection]
        # print(videos)

    # await message.answer_photo('https://img.freepik.com/free-photo/view-of-3d-adorable-cat-with-fluffy-clouds_23-2151113419.jpg')
    
    await message.answer_media_group(media=mb.build())
    await message.answer_media_group(media=mb_files.build())
    


# @main_router.message(F.video)
# async def add_photo(message: types.Message,
#                     session: Session,
#                     bot: Bot):
#     video = message.video
#     MassSendVideo = Base.classes.general_models_masssendvideo

#     session.execute(insert(MassSendVideo).values({'file_id': video.file_id,
#                                                   'video': video.file_name,
#                                                   'messsage_id': 1}))
#     session.commit()

#     await message.delete()

async def send_mass_message_test(bot: Bot,
                            session: Session,
                            user_id: int,
                            name_send: str):
        with session as session:
            Guest = Base.classes.general_models_guest
            # session: Session

            # get MassSendMessage model from DB
            MassSendMessage = Base.classes.general_models_masssendmessage
            # mass_message = session.query(MassSendMessage)\
            #                         .options(joinedload(MassSendMessage.general_models_masssendimage_collection),
            #                                  joinedload(MassSendMessage.general_models_masssendvideo_collection))\
            #                         .first()
            mass_message = session.query(MassSendMessage)\
                                    .options(joinedload(MassSendMessage.general_models_masssendimage_collection),
                                             joinedload(MassSendMessage.general_models_masssendvideo_collection))\
                                    .where(MassSendMessage.name == name_send).first()

            # try add file_id for each related file passed object
            await try_add_file_ids(bot, session, mass_message)
            # refresh all DB records
            session.expire_all()

            mass_message_text: str = mass_message.content
            print(mass_message_text)
            # validate content text
            mass_message_text: str = mass_message_text.replace('<p>','')\
                                                        .replace('</p>', '\n')\
                                                        .replace('<br>', '')\
                                                        .replace('<p class="">', '')\
                                                        .replace('&nbsp;', ' ')\
                                                        # .replace('<span>', '')\
                                                        # .replace('</span>', '')   

            # print(mass_message_text)

            images = [types.InputMediaPhoto(media=image.file_id) for image in mass_message.general_models_masssendimage_collection]
            videos = [types.InputMediaVideo(media=video.file_id) for video in mass_message.general_models_masssendvideo_collection]
            
            #test for moneyswap team
            # query = (
            #     select(Guest)\
            #     .where(Guest.tg_id.in_([60644557,
            #                             350016695,
            #                             471715294,
            #                             311364517,
            #                             283163508,
            #                             5047108619,
            #                             561803366,
            #                             686339126,
            #                             620839543,
            #                             375236081,

            #     ]))
            # )
            
            #test for me only
            query = (
                select(Guest)\
                .where(Guest.tg_id == user_id)
            )

            # mass_send for all guests
            # query = (select(Guest))


# [60644557,
#                                         471715294,
#                                         561803366,
#                                         686339126,
#                                         283163508,
#                                         283163508,
#                                         311364517]

            res = session.execute(query)

            guests = res.fetchall()

            # print(guests)

            image_video_group = None
            if list(images+videos):
                image_video_group = MediaGroupBuilder(images+videos, caption=mass_message_text)
            
            files = [types.InputMediaDocument(media=file.file_id) for file in mass_message.general_models_masssendfile_collection]
            file_group = None
            if files:
                file_group = MediaGroupBuilder(files)

            # try:
            for guest in guests:
                try:
                    guest = guest[0]
                    _tg_id = guest.tg_id
                    if image_video_group is not None:
                        mb1 = await bot.send_media_group(_tg_id, media=image_video_group.build())
                        # print('MB1', mb1)
                    else:
                        await bot.send_message(_tg_id,
                                            text=mass_message_text)
                    if file_group is not None:
                        mb2 = await bot.send_media_group(_tg_id, media=file_group.build())    
                        # print('MB2', mb2)
                    # guest = session.query(Guest).where(Guest.tg_id == '350016695').first()
                    if not guest.is_active:
                        session.execute(update(Guest).where(Guest.tg_id == _tg_id).values(is_active=True))
                        # session.commit()
                except Exception as ex:
                    print(ex)
                    if guest.is_active:
                        session.execute(update(Guest).where(Guest.tg_id == _tg_id).values(is_active=False))
                    # session.commit()
                finally:
                    await sleep(0.3)
            
            try:
                session.commit()
            except Exception as ex:
                session.rollback()
                print('send error', ex)
            
            session.close()




async def send_mass_message(bot: Bot,
                            session: Session,
                            name_send: str):
        start_send_time = time.time()

        with session as session:
            Guest = Base.classes.general_models_guest
            # session: Session

            # get MassSendMessage model from DB
            MassSendMessage = Base.classes.general_models_masssendmessage
            # mass_message = session.query(MassSendMessage)\
            #                         .options(joinedload(MassSendMessage.general_models_masssendimage_collection),
            #                                  joinedload(MassSendMessage.general_models_masssendvideo_collection))\
            #                         .first()
            mass_message = session.query(MassSendMessage)\
                                    .options(joinedload(MassSendMessage.general_models_masssendimage_collection),
                                             joinedload(MassSendMessage.general_models_masssendvideo_collection))\
                                    .where(MassSendMessage.name == name_send).first()

            # try add file_id for each related file passed object
            await try_add_file_ids(bot, session, mass_message)
            # refresh all DB records
            session.expire_all()

            mass_message_text: str = mass_message.content
            # print(mass_message_text)
            # validate content text
            mass_message_text: str = mass_message_text.replace('<p>','')\
                                                        .replace('</p>', '\n')\
                                                        .replace('<br>', '')\
                                                        .replace('<p class="">', '')\
                                                        .replace('&nbsp;', ' ')
                                                        # .replace('<span', '<span class="tg-spoiler"')

            # print(mass_message_text)

            images = [types.InputMediaPhoto(media=image.file_id) for image in mass_message.general_models_masssendimage_collection]
            videos = [types.InputMediaVideo(media=video.file_id) for video in mass_message.general_models_masssendvideo_collection]
            
            #test for moneyswap team
            # query = (
            #     select(Guest)\
            #     .where(Guest.tg_id.in_([60644557,
            #                             350016695,
            #                             471715294,
            #                             311364517,
            #                             283163508,
            #                             5047108619,
            #                             561803366,
            #                             686339126,
            #                             620839543,
            #                             375236081,

            #     ]))
            # )
            
            #test for me only
            # query = (
            #     select(Guest)\
            #     .where(Guest.tg_id.in_([686339126]))
            # )

            # mass_send for all guests
            query = (select(Guest))


# [60644557,
#                                         471715294,
#                                         561803366,
#                                         686339126,
#                                         283163508,
#                                         283163508,
#                                         311364517]

            res = session.execute(query)

            guests = res.fetchall()

            start_users_count = len([guest for guest in guests if guest[0].is_active == True])

            # print(guests)

            image_video_group = None
            if list(images+videos):
                image_video_group = MediaGroupBuilder(images+videos, caption=mass_message_text)
            
            files = [types.InputMediaDocument(media=file.file_id) for file in mass_message.general_models_masssendfile_collection]
            file_group = None
            if files:
                file_group = MediaGroupBuilder(files)

            # try:
            for guest in guests:
                try:
                    guest = guest[0]
                    _tg_id = guest.tg_id
                    if image_video_group is not None:
                        mb1 = await bot.send_media_group(_tg_id, media=image_video_group.build())
                        # print('MB1', mb1)
                    else:
                        await bot.send_message(_tg_id,
                                            text=mass_message_text)
                    if file_group is not None:
                        mb2 = await bot.send_media_group(_tg_id, media=file_group.build())    
                        # print('MB2', mb2)
                    # guest = session.query(Guest).where(Guest.tg_id == '350016695').first()
                    if not guest.is_active:
                        session.execute(update(Guest).where(Guest.tg_id == _tg_id).values(is_active=True))
                        # session.commit()
                except Exception as ex:
                    print(ex)
                    if guest.is_active:
                        session.execute(update(Guest).where(Guest.tg_id == _tg_id).values(is_active=False))
                    # session.commit()
                finally:
                    await sleep(0.3)
            
            end_send_time = time.time()
            
            try:
                session.commit()
                _text = ''
            except Exception as ex:
                session.rollback()
                _text = ''
                print('send error', ex)
            finally:
                execute_time = end_send_time - start_send_time

                # query = (
                #     select(
                #         Guest.id
                #     )\
                #     .where(Guest.is_active == False)
                # )

                end_active_users_count = session.query(Guest.tg_id).where(Guest.is_active == True).count()

                try:
                    _url = f'https://api.moneyswap.online/send_mass_message_info?execute_time={execute_time}&start_users_count={start_users_count}&end_users_count={end_active_users_count}'
                    timeout = aiohttp.ClientTimeout(total=5)
                    async with aiohttp.ClientSession() as session:
                        async with session.get(_url,
                                            timeout=timeout) as response:
                            pass
                except Exception as ex:
                    print(ex)
                    pass
            session.close()


async def try_send_order(bot: Bot,
                         session: Session,
                         user_id: int,
                         order_id: int):
    with session as session:
        CustomOrder = Base.classes.general_models_customorder
        Guest = Base.classes.general_models_guest

        query = (
            select(
                CustomOrder,
                Guest,
            )\
            .join(Guest,
                  CustomOrder.guest_id == Guest.tg_id)\
            .where(
                CustomOrder.guest_id == user_id,
                CustomOrder.id == order_id,
            )
        )

        res = session.execute(query)

        order = res.fetchall()
        print(order)

    if order:
        order, guest = order[0]
        chat_link = guest.chat_link

        print(order.__dict__)
        
        # if chat_link is None:
        if chat_link is None:
            print('–¥–µ–ª–∞—é –ø–æ—Å—Ç –∑–∞–ø—Ä–æ—Å')

            # body = f'''"tg_id": {order['guest_id']}, "type": "{order['request_type']}", "country": "{order['country']}", "sum": "{order['amount']}", "comment": "{order['comment']}", "time_create": {order['time_create'].timestamp()}'''

            # body = f'''"tg_id": {order.guest_id}, "type": "{order.request_type}", "country": "{order.country}", "sum": "{order.amount}", "comment": "{order.comment}", "time_create": {order.time_create.timestamp()}'''
            # json_order = {
            #     "order": '{' + body + '}'
            # }
            body = {'comment': f'–¢–∏–ø –∑–∞—è–≤–∫–∏: {order.request_type}| {order.comment}'}

            json_order = json.dumps(body,
                                    ensure_ascii=False)

            print('json', json_order)
        
            async with aiohttp.ClientSession() as aiosession:
                response = await aiosession.post(url='https://api.moneyport.ru/api/partners/create-order',
                                            data=json_order,
                                            headers={'Authorization': f'Bearer {BEARER_TOKEN}',
                                                    'CONTENT-TYPE': 'application/json'})
                response_json = await response.json()
                
            chat_link = response_json.get('chat')

            if chat_link is not None:
                chat_link = chat_link.get('url')

                session.execute(update(Guest)\
                                .where(Guest.tg_id == user_id)\
                                .values(chat_link=chat_link))
                # guest.chat_link = chat_link
                session.commit()
            else:
                print('–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å')
                return
        else:
            print('—Å—Å—ã–ª–∫–∞ –∏–∑ –±–∞–∑—ã', guest.chat_link)

        chat_link_text = f'–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –ø–æ –í–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é -> {chat_link}\n\n<i>*–ú–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å –≤–∏–¥ —á–∞—Ç–∞, –º—ã –±—É–¥–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.</i>'

        try:
            await bot.send_message(chat_id=user_id,
                                   text=chat_link_text)
        except Exception as ex:
            print(ex)
            # –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞ —É–≤–µ–¥–æ–ª–º–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
            try:
                result_text = f'–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ MoneyPort –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
                _url = f'https://api.moneyswap.online/send_result_chat_link?{result_text}'
                
                timeout = aiohttp.ClientTimeout(total=5)
                async with aiohttp.ClientSession() as session:
                    async with session.get(_url,
                                        timeout=timeout) as response:
                        pass
            except Exception as ex:
                print(ex)
                pass
        else:
            print('C–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            # –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞ —É–≤–µ–¥–æ–ª–º–µ–Ω–∏–π –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ MoneyPort —á–∞—Ç
            try:
                result_text = f'–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ MoneyPort —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}'
                _url = f'https://api.moneyswap.online/send_result_chat_link?{result_text}'

                timeout = aiohttp.ClientTimeout(total=5)
                async with aiohttp.ClientSession() as session:
                    async with session.get(_url,
                                        timeout=timeout) as response:
                        pass
            except Exception as ex:
                print(ex)
                pass



# @main_router.message(F.text == 'send_link22')
# async def send_link_test(message: types.Message,
#                                 session: Session,
#                                 state: FSMContext,
#                                 bot: Bot):
#     _text = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å.\n–ü–æ–ª—É—á–∏–ª–∏ –æ—Ç –≤–∞—Å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–∫—É–ø–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –¢–∞–∏–ª–∞–Ω–¥–µ.\n–î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω —á–∞—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤–æ–ø—Ä–æ—Å—É https://t.me/+7JWLAnMKyUUwMWEy'
    
#     # guest
#     _chat_id = 7327884297


#     # sugar
#     # _chat_id = 293371619


#     # me
#     # _chat_id = 686339126
#     try:
#         await bot.send_message(chat_id=_chat_id,
#                                 text=_text)
#     except Exception as ex:
#         print('send error', ex)
#     else:
#         print('message sent successfully')
#     try:
#         await message.delete()
#     except Exception as ex:
#         print(ex)



@main_router.message()
async def ignore_any_message(message: types.Message):
    try:
        await message.delete()
    except Exception as ex:
        print(ex)